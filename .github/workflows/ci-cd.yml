name: Docker MCP Integration CI/CD

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]

env:
  IMAGE_NAME: mcp-integration-test
  REGISTRY: ghcr.io

jobs:
  build-test-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/Dockerfile
        push: false
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          BRANCH_NAME=${{ github.ref_name }}
          BUILD_NUMBER=${{ github.run_number }}
          COMMIT_HASH=${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Start container for testing
      run: |
        docker run -d \
          --name test-container \
          -p 8000:8000 \
          -e APP_ENV=testing \
          -e BRANCH_NAME=${{ github.ref_name }} \
          --health-cmd "curl -f http://localhost:8000/health || exit 1" \
          --health-interval 30s \
          --health-timeout 10s \
          --health-retries 3 \
          --health-start-period 40s \
          ${{ steps.meta.outputs.tags }}
    
    - name: Wait for container health check
      run: |
        echo "Waiting for container to be healthy..."
        timeout 120 bash -c 'until [ "$(docker inspect --format="{{.State.Health.Status}}" test-container)" == "healthy" ]; do sleep 5; done'
        echo "Container is healthy!"
    
    - name: Run health check tests
      run: |
        # Test health endpoint
        curl -f http://localhost:8000/health
        
        # Test API endpoints
        curl -f http://localhost:8000/api/info
        curl -f http://localhost:8000/api/test
        
        # Test metrics endpoint
        curl -f http://localhost:8000/metrics
    
    - name: Set up Python for testing
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install test dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests pytest
    
    - name: Run Python tests
      run: |
        # Run basic API tests
        python -c "
        import requests
        import json
        
        base_url = 'http://localhost:8000'
        
        # Test health
        health = requests.get(f'{base_url}/health')
        assert health.status_code == 200
        assert health.json()['status'] == 'healthy'
        
        # Test API info
        info = requests.get(f'{base_url}/api/info')
        assert info.status_code == 200
        assert 'app_name' in info.json()
        
        # Test API test endpoint
        test = requests.get(f'{base_url}/api/test')
        assert test.status_code == 200
        assert test.json()['test'] == 'success'
        
        print('All tests passed!')
        "
    
    - name: Run load test
      run: |
        # Simple load test
        echo "Running load test..."
        for i in {1..50}; do
          curl -s http://localhost:8000/api/test > /dev/null
        done
        echo "Load test completed"
    
    - name: Collect container logs
      if: always()
      run: |
        echo "Container logs:"
        docker logs test-container
    
    - name: Stop and remove test container
      if: always()
      run: |
        docker stop test-container || true
        docker rm test-container || true
    
    - name: Push Docker image
      if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          BRANCH_NAME=${{ github.ref_name }}
          BUILD_NUMBER=${{ github.run_number }}
          COMMIT_HASH=${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Create deployment summary
      if: success()
      run: |
        echo "## ðŸš€ Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Image Tags**: ${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Build Number**: ${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: âœ… All tests passed" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ github.event_name }}" == "push" ] && [ "${{ github.ref }}" == "refs/heads/main" ]; then
          echo "- **Deployment**: ðŸŽ‰ Image pushed to registry" >> $GITHUB_STEP_SUMMARY
        fi
