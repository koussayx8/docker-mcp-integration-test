name: Docker MCP Integration CI/CD

on:
  push:
    branches: [ master, main, develop, feature/* ]
  pull_request:
    branches: [ master, main, develop ]

env:
  IMAGE_NAME: mcp-integration-test
  REGISTRY: ghcr.io

jobs:
  build-test-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Build Docker image
      run: |
        docker build -t test-image:latest -f ./docker/Dockerfile .
        docker tag test-image:latest ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}-${{ github.sha }}
        docker tag test-image:latest ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:latest
    
    - name: Start container for testing
      run: |
        docker run -d \
          --name test-container \
          -p 8000:8000 \
          -e APP_ENV=testing \
          -e BRANCH_NAME=${{ github.ref_name }} \
          test-image:latest
    
    - name: Wait for container health check
      run: |
        echo "Waiting for container to start..."
        sleep 10
        echo "Testing if container is responsive..."
        timeout 60 bash -c 'until curl -f http://localhost:8000/health; do echo "Waiting for app..."; sleep 5; done'
        echo "Container is ready!"
    
    - name: Run health check tests
      run: |
        # Test health endpoint using Python
        python3 -c "
        import urllib.request
        import json
        
        # Test health endpoint
        response = urllib.request.urlopen('http://localhost:8000/health')
        data = json.loads(response.read().decode())
        assert data['status'] == 'healthy'
        print('âœ… Health check passed')
        
        # Test API info endpoint
        response = urllib.request.urlopen('http://localhost:8000/api/info')
        data = json.loads(response.read().decode())
        assert 'app_name' in data
        print('âœ… API info check passed')
        
        # Test API test endpoint
        response = urllib.request.urlopen('http://localhost:8000/api/test')
        data = json.loads(response.read().decode())
        assert data['test'] == 'success'
        print('âœ… API test check passed')
        
        # Test metrics endpoint (just check it responds)
        response = urllib.request.urlopen('http://localhost:8000/metrics')
        metrics_data = response.read().decode()
        assert 'python_info' in metrics_data
        print('âœ… Metrics check passed')
        "
    
    - name: Set up Python for testing
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install test dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests pytest
    
    - name: Run Python tests
      run: |
        # Run basic API tests
        python -c "
        import requests
        import json
        
        base_url = 'http://localhost:8000'
        
        # Test health
        health = requests.get(f'{base_url}/health')
        assert health.status_code == 200
        assert health.json()['status'] == 'healthy'
        
        # Test API info
        info = requests.get(f'{base_url}/api/info')
        assert info.status_code == 200
        assert 'app_name' in info.json()
        
        # Test API test endpoint
        test = requests.get(f'{base_url}/api/test')
        assert test.status_code == 200
        assert test.json()['test'] == 'success'
        
        print('All tests passed!')
        "
    
    - name: Run load test
      run: |
        # Simple load test using Python
        python3 -c "
        import urllib.request
        import time
        
        print('Running load test...')
        success_count = 0
        
        for i in range(50):
            try:
                response = urllib.request.urlopen('http://localhost:8000/api/test')
                if response.getcode() == 200:
                    success_count += 1
            except Exception as e:
                print(f'Request {i+1} failed: {e}')
            
            if i % 10 == 9:
                print(f'Completed {i+1}/50 requests')
        
        print(f'Load test completed: {success_count}/50 requests successful')
        assert success_count >= 45, f'Too many failures: {50-success_count}'
        "
    
    - name: Collect container logs
      if: always()
      run: |
        echo "Container logs:"
        docker logs test-container
    
    - name: Stop and remove test container
      if: always()
      run: |
        docker stop test-container || true
        docker rm test-container || true
    
    - name: Push Docker image
      if: github.event_name == 'push' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
      run: |
        docker push ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}-${{ github.sha }}
        docker push ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:latest
    
    - name: Create deployment summary
      if: success()
      run: |
        echo "## ðŸš€ Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Image Tags**: ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}-${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Build Number**: ${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: âœ… All tests passed" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ github.event_name }}" == "push" ] && [ "${{ github.ref }}" == "refs/heads/master" ] || [ "${{ github.ref }}" == "refs/heads/main" ]; then
          echo "- **Deployment**: ðŸŽ‰ Image pushed to registry" >> $GITHUB_STEP_SUMMARY
        fi
