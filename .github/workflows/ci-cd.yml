name: Docker MCP Integration CI/CD

on:
  push:
    branches: [ master, main, develop, feature/* ]
  pull_request:
    branches: [ master, main, develop ]

env:
  IMAGE_NAME: mcp-integration-test
  GITHUB_REGISTRY: ghcr.io
  DOCKER_HUB_USERNAME: koussayx8
  DOCKERHUB_USERNAME: koussayx8

jobs:
  build-test-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.GITHUB_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ env.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}
    
    - name: Extract metadata for GitHub Container Registry
      id: meta-ghcr
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.GITHUB_REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=raw,value=latest,enable={{is_default_branch}}
          type=sha,prefix={{branch}}-
    
    - name: Extract metadata for Docker Hub
      id: meta-dockerhub
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=raw,value=latest,enable={{is_default_branch}}
          type=sha,prefix={{branch}}-
    
    - name: Build Docker image for testing
      run: |
        echo "Building Docker image with standard docker build..."
        docker build -t local-test:latest -f ./docker/Dockerfile .
        echo "Listing images to confirm build:"
        docker images | grep local-test
    
    - name: Start container for testing
      run: |
        docker run -d \
          --name test-container \
          -p 8000:8000 \
          -e APP_ENV=testing \
          -e BRANCH_NAME=${{ github.ref_name }} \
          local-test:latest
    
    - name: Wait for container health check
      run: |
        echo "Waiting for container to start..."
        sleep 15
        echo "Testing container health with Python..."
        python3 -c "
        import urllib.request
        import time
        import sys
        
        for i in range(12):
            try:
                response = urllib.request.urlopen('http://localhost:8000/health')
                if response.getcode() == 200:
                    print('Container is healthy!')
                    sys.exit(0)
            except:
                print(f'Attempt {i+1}: Container not ready yet...')
                time.sleep(5)
        
        print('Container failed to become healthy')
        sys.exit(1)
        "
    
    - name: Run health check tests
      run: |
        # Test endpoints using Python instead of curl
        python3 -c "
        import urllib.request
        import json
        
        # Test health endpoint
        response = urllib.request.urlopen('http://localhost:8000/health')
        data = json.loads(response.read().decode())
        assert data['status'] == 'healthy'
        print('✅ Health check passed')
        
        # Test API info
        response = urllib.request.urlopen('http://localhost:8000/api/info')
        data = json.loads(response.read().decode())
        assert 'app_name' in data
        print('✅ API info passed')
        
        # Test API test
        response = urllib.request.urlopen('http://localhost:8000/api/test')
        data = json.loads(response.read().decode())
        assert data['test'] == 'success'
        print('✅ API test passed')
        
        # Test metrics
        response = urllib.request.urlopen('http://localhost:8000/metrics')
        metrics = response.read().decode()
        assert 'python_info' in metrics
        print('✅ Metrics passed')
        "
    
    - name: Set up Python for testing
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install test dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests pytest
    
    - name: Run Python tests
      run: |
        # Run basic API tests
        python -c "
        import requests
        import json
        
        base_url = 'http://localhost:8000'
        
        # Test health
        health = requests.get(f'{base_url}/health')
        assert health.status_code == 200
        assert health.json()['status'] == 'healthy'
        
        # Test API info
        info = requests.get(f'{base_url}/api/info')
        assert info.status_code == 200
        assert 'app_name' in info.json()
        
        # Test API test endpoint
        test = requests.get(f'{base_url}/api/test')
        assert test.status_code == 200
        assert test.json()['test'] == 'success'
        
        print('All tests passed!')
        "
    
    - name: Run load test
      run: |
        # Simple load test using Python
        python3 -c "
        import urllib.request
        print('Running load test...')
        success_count = 0
        for i in range(50):
            try:
                response = urllib.request.urlopen('http://localhost:8000/api/test')
                if response.getcode() == 200:
                    success_count += 1
            except:
                pass
        print(f'Load test completed: {success_count}/50 successful')
        "
    
    - name: Collect container logs
      if: always()
      run: |
        echo "Container logs:"
        docker logs test-container
    
    - name: Stop and remove test container
      if: always()
      run: |
        docker stop test-container || true
        docker rm test-container || true
    
    - name: Build and push to GitHub Container Registry
      if: github.event_name == 'push' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/Dockerfile
        push: true
        tags: ${{ steps.meta-ghcr.outputs.tags }}
        labels: ${{ steps.meta-ghcr.outputs.labels }}
        build-args: |
          BRANCH_NAME=${{ github.ref_name }}
          BUILD_NUMBER=${{ github.run_number }}
          COMMIT_HASH=${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build and push to Docker Hub
      if: github.event_name == 'push' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/Dockerfile
        push: true
        tags: ${{ steps.meta-dockerhub.outputs.tags }}
        labels: ${{ steps.meta-dockerhub.outputs.labels }}
        build-args: |
          BRANCH_NAME=${{ github.ref_name }}
          BUILD_NUMBER=${{ github.run_number }}
          COMMIT_HASH=${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Create deployment summary
      if: success()
      run: |
        echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Build Number**: ${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: ✅ All tests passed" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ github.event_name }}" == "push" ] && ([ "${{ github.ref }}" == "refs/heads/master" ] || [ "${{ github.ref }}" == "refs/heads/main" ] || [ "${{ github.ref }}" == "refs/heads/develop" ]); then
          echo "## 📦 Published Images" >> $GITHUB_STEP_SUMMARY
          echo "### GitHub Container Registry" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.meta-ghcr.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Docker Hub" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.meta-dockerhub.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Deployment**: 🎉 Images pushed to both registries" >> $GITHUB_STEP_SUMMARY
          echo "- **GitHub Container Registry**: ghcr.io/${{ github.repository }}/${{ env.IMAGE_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Docker Hub**: ${{ env.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}" >> $GITHUB_STEP_SUMMARY
        fi
    
    - name: Output pull commands
      if: success() && github.event_name == 'push' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
      run: |
        echo "## 🐳 Pull Commands" >> $GITHUB_STEP_SUMMARY
        echo "### From GitHub Container Registry:" >> $GITHUB_STEP_SUMMARY
        echo '```bash' >> $GITHUB_STEP_SUMMARY
        echo "docker pull ghcr.io/${{ github.repository }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### From Docker Hub:" >> $GITHUB_STEP_SUMMARY
        echo '```bash' >> $GITHUB_STEP_SUMMARY
        echo "docker pull ${{ env.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
